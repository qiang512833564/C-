
    第一层次，C++基础：挑选一本入门书籍，如《C++ Primer》、《C++大学教程》、或Stroustrup撰写的经典《C++程序设计语言》或他一年半前的新作《C++程序设计原理与实践》，而一般C++课程也止于此，另外《C++ 标准程序库》及《The C++ Standard Library Extensions》可供参考；
   第二层次，正确高效地使用C++：此层次开始必须自修，阅读过《(More)Effective C++》、《(More)Exceptional C++》、《Effective STL》及《C++编程规范》等，才适宜踏入专业C++开发之路；
   第三层次，深入了解C++：关于全局问题可读《深入探索C++对象模型》、《Imperfect C++》、《C++沉思录》、《STL源码剖析》，要挑战智商，可看关于模版及模版元编程的书籍如《C++ Templates》、《C++设计新思维》、《C++模版元编程》；
   第四层次，研究C++：阅读《C++语言的设计和演化》、《编程的本质》(含STL设计背后的数学根基)、C++标准文件《ISO/IEC 14882:2003》、C++标准委员会的提案书和报告书、关于C++的学术文献。 

一、函数参数：
1.所有的参数传递，都是传递值得拷贝。（这是由编译器对函数调用时候参数的压栈和出栈决定的）
2.传指针进去，其实也是把这个指针值按拷贝传送进去。但是因为指针指向一块外部内存空间，所以感觉可以在函数里改变外部变量

在实际编程中，也通常是按传指针的方式来命名形参，但是得注意：传指针的方式，有两中：
第一种：就是传指针
第二种：传引用
引用分为：指针引用等

引用可以看做是：是已定义变量的别名

当实参传给形参引用的时候，只不过是c++编译器帮我们程序员手工取了一个实参地址，传给了形参引用（常量指针）
引用在C++中的内部实现是一个常指针 Type& name 可以看做是 Type* const name
C++编译器在编译过程中使用常指针作为引用的内部实现，因此引用所占用的空间大小与指针相同

引用的意义：
1）引用作为其它变量的别名而存在，因此在一些场合可以代替指针2）引用相对于指针来说具有更好的可读性和实用性

二、函数返回值
返回值是按拷贝传递，函数出栈后，会传出一个值，该值在调用函数的代码段的生命周期里一直有效。相当与调用点形成一个匿名的栈变量。
因此，得注意的是，看返回的是值还是引用还是指针，但是从本质上来说，都是值得拷贝，只不过引用和指针，是对变量地址的拷贝

总结：变量值得拷贝       ，类似于 深拷贝
     变量引用和指针的拷贝，类似于 浅拷贝